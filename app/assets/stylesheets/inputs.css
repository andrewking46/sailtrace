/* Text inputs */

:root {
  --input-border-color: var(--color-border-darker);
  --input-border-radius: 0.5em;
}

.input-group {
  --input-border-size: 1px;
  --input-padding-block: var(--block-space-half);
  --input-padding-inline: var(--inline-space);

  border-radius: var(--input-border-radius);
  border: var(--input-border-size, 1px) solid var(--input-border-color);

  .input-wrapper {
    align-items: stretch;
    display: flex;
    flex-wrap: nowrap;
    margin: 0;
    overflow: hidden;
    position: relative;
    width: 100%;

    &:focus-within {
      --hover-color: var(--color-selected-dark);
      --outline-size: calc(var(--input-border-size) * 2);

      border-color: var(--color-selected-dark);
      outline: 2px solid var(--color-border-darkest);
      outline-offset: -1px;
    }

    &:first-of-type {
      border-top-left-radius: calc(var(--input-border-radius) - var(--input-border-size));
      border-top-right-radius: calc(var(--input-border-radius) - var(--input-border-size));
    }

    &:last-of-type {
      border-bottom-left-radius: calc(var(--input-border-radius) - var(--input-border-size));
      border-bottom-right-radius: calc(var(--input-border-radius) - var(--input-border-size));
    }

    label {
      color: var(--color-text-muted);
      font-size: 0.875rem;
      left: 0;
      max-inline-size: 100%;
      padding-block: var(--input-padding-block) 0;
      padding-inline: calc(var(--input-padding-inline) + 1px);
      position: absolute;
      top: 0;
    }

    .input-prepend,
    .input-append {
      align-items: center;
      display: flex;
      flex: 0 1 auto;
      padding: calc(var(--input-padding-block) * 3) var(--input-padding-inline) var(--input-padding-block);
    }

    .input {
      flex: 1 1 0;

      input,
      select,
      textarea {
        accent-color: var(--input-accent-color, var(--color-text));
        appearance: none;
        background-color: transparent;
        border: none;
        inline-size: 100%;
        outline: none;
        padding: calc(var(--input-padding-block) * 3) var(--input-padding-inline) var(--input-padding-block);
        resize: none;
      }
    }

    + .input-wrapper {
      border-top: var(--input-border-size, 1px) solid var(--input-border-color, var(--color-border-darker));
    }
  }
}

select {
  background: url("data:image/svg+xml,<svg height='10px' width='10px' viewBox='0 0 16 16' fill='%23000000' xmlns='http://www.w3.org/2000/svg'><path d='M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/></svg>") no-repeat;
  background-position: calc(100% - 0.75rem) center;
}

input,
select,
textarea {
  color: var(--input-color, var(--color-text));
  min-block-size: 3.5rem;

  &:autofill,
  &:-webkit-autofill,
  &:-webkit-autofill:hover,
  &:-webkit-autofill:focus {
    -webkit-text-fill-color: var(--color-text);
    -webkit-box-shadow: 0 0 0px 1000px var(--color-selected) inset;
  }
}








.input {


  /*font-size: max(16px, 1em);
  inline-size: 100%;
  resize: none;*/

  &[type="search"] {
    &::-webkit-search-decoration,
    &::-webkit-search-results-button,
    &::-webkit-search-results-decoration {
      display: none;
    }
  }



  /*&:where(:not(:active)):focus {
    --input-border-color: var(--color-selected-dark);
    --hover-color: var(--color-selected-dark);
    --outline-size: 0;

    filter: var(--hover-filter);
    box-shadow: 0 0 0 var(--hover-size) var(--hover-color);
  }*/
}

.input--actor {
  transition: box-shadow 150ms ease, outline-offset 150ms ease;

  /*&:focus-within {
    --input-border-color: var(--color-selected-dark);
    --hover-color: var(--color-selected-dark);
    --outline-size: 0;

    filter: var(--hover-filter);
    box-shadow: 0 0 0 var(--hover-size) var(--hover-color);
  }*/

  .input {
    --input-padding: 0;
    --input-background: transparent;
    --input-border-size: 0;
    --hover-size: 0;
    --outline-size: 0;
    --outline-color: transparent;

    outline: 0;
  }

  &:has(.input:is(
    :autofill,
    :-webkit-autofill,
    :-webkit-autofill:hover,
    :-webkit-autofill:focus)) {
    -webkit-text-fill-color: var(--color-text);
    -webkit-box-shadow: 0 0 0px 1000px var(--color-selected) inset;
  }

  .btn:not(.avatar) {
    margin-block: -0.4em;

    &:last-child {
      margin-inline-end: -0.7em;
    }
  }

  .btn--reversed img {
    inline-size: 1em;
  }
}

.input--file {
  input[type="file"] {
    --hover-size: 0;

    block-size: 100%;
    border: 0;
    border-radius: 50%;
    inline-size: 100%;
    overflow: clip;
    padding: 0;

    &::file-selector-button {
      appearance: none;
      cursor: pointer;
      opacity: 0;
    }
  }

  &:not(.avatar) {
    img {
      inline-size: 1.6em;
    }
  }
}

.switch {
  block-size: 1.75em;
  display: inline-flex;
  inline-size: 3em;
  position: relative;
  border-radius: 2em;

  @media (any-hover: hover) {
    &:where(:not(:active):hover) .switch__btn {
      filter: brightness(0.7);
      box-shadow: none;
    }
  }

  &:focus-within .switch__btn {
    --shadow-size: min(0.2em, 2px);

    box-shadow:
      0 0 0 var(--shadow-size) var(--color-bg),
      0 0 0 calc(var(--shadow-size) * 2) var(--color-link);
  }
}

.switch__input {
  block-size: 0;
  inline-size: 0;
  opacity: 0.1;
}

.switch__btn {
  background-color: var(--color-border-darker);
  border-radius: 2em;
  cursor: pointer;
  inset: 0;
  position: absolute;
  transition: 150ms ease;

  &::before {
    background-color: var(--color-text-reversed);
    block-size: 1.35em;
    border-radius: 50%;
    content: "";
    inline-size: 1.35em;
    inset-block-end: 0.2em;
    inset-inline-start: 0.2em;
    position: absolute;
    transition: 150ms ease;
  }

  .switch__input:disabled + & {
    background-color: var(--color-border-darker) !important;
    cursor: not-allowed;
  }

  .switch__input:checked + & {
    background-color: var(--color-text);

    &::before {
      transform: translateX(1.2em);
    }
  }
}
